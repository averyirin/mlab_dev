<?php

namespace Proxies\__CG__\Sinett\MLAB\BuilderBundle\Entity;

/**
 * DO NOT EDIT THIS FILE - IT WAS CREATED BY DOCTRINE'S PROXY GENERATOR
 */
class Group extends \Sinett\MLAB\BuilderBundle\Entity\Group implements \Doctrine\ORM\Proxy\Proxy
{
    /**
     * @var \Closure the callback responsible for loading properties in the proxy object. This callback is called with
     *      three parameters, being respectively the proxy object to be initialized, the method that triggered the
     *      initialization process and an array of ordered parameters that were passed to that method.
     *
     * @see \Doctrine\Common\Persistence\Proxy::__setInitializer
     */
    public $__initializer__;

    /**
     * @var \Closure the callback responsible of loading properties that need to be copied in the cloned object
     *
     * @see \Doctrine\Common\Persistence\Proxy::__setCloner
     */
    public $__cloner__;

    /**
     * @var boolean flag indicating if this object was already initialized
     *
     * @see \Doctrine\Common\Persistence\Proxy::__isInitialized
     */
    public $__isInitialized__ = false;

    /**
     * @var array properties to be lazy loaded, with keys being the property
     *            names and values being their default values
     *
     * @see \Doctrine\Common\Persistence\Proxy::__getLazyProperties
     */
    public static $lazyPropertiesDefaults = [];



    /**
     * @param \Closure $initializer
     * @param \Closure $cloner
     */
    public function __construct($initializer = null, $cloner = null)
    {

        $this->__initializer__ = $initializer;
        $this->__cloner__      = $cloner;
    }







    /**
     * 
     * @return array
     */
    public function __sleep()
    {
        if ($this->__isInitialized__) {
            return ['__isInitialized__', 'id', 'name', '' . "\0" . 'Sinett\\MLAB\\BuilderBundle\\Entity\\Group' . "\0" . 'description', '' . "\0" . 'Sinett\\MLAB\\BuilderBundle\\Entity\\Group' . "\0" . 'isDefault', '' . "\0" . 'Sinett\\MLAB\\BuilderBundle\\Entity\\Group' . "\0" . 'users', '' . "\0" . 'Sinett\\MLAB\\BuilderBundle\\Entity\\Group' . "\0" . 'menus', '' . "\0" . 'Sinett\\MLAB\\BuilderBundle\\Entity\\Group' . "\0" . 'apps', '' . "\0" . 'Sinett\\MLAB\\BuilderBundle\\Entity\\Group' . "\0" . 'templates', '' . "\0" . 'Sinett\\MLAB\\BuilderBundle\\Entity\\Group' . "\0" . 'componentGroups', '' . "\0" . 'Sinett\\MLAB\\BuilderBundle\\Entity\\Group' . "\0" . 'enabled', '' . "\0" . 'Sinett\\MLAB\\BuilderBundle\\Entity\\Group' . "\0" . 'categories', 'roles'];
        }

        return ['__isInitialized__', 'id', 'name', '' . "\0" . 'Sinett\\MLAB\\BuilderBundle\\Entity\\Group' . "\0" . 'description', '' . "\0" . 'Sinett\\MLAB\\BuilderBundle\\Entity\\Group' . "\0" . 'isDefault', '' . "\0" . 'Sinett\\MLAB\\BuilderBundle\\Entity\\Group' . "\0" . 'users', '' . "\0" . 'Sinett\\MLAB\\BuilderBundle\\Entity\\Group' . "\0" . 'menus', '' . "\0" . 'Sinett\\MLAB\\BuilderBundle\\Entity\\Group' . "\0" . 'apps', '' . "\0" . 'Sinett\\MLAB\\BuilderBundle\\Entity\\Group' . "\0" . 'templates', '' . "\0" . 'Sinett\\MLAB\\BuilderBundle\\Entity\\Group' . "\0" . 'componentGroups', '' . "\0" . 'Sinett\\MLAB\\BuilderBundle\\Entity\\Group' . "\0" . 'enabled', '' . "\0" . 'Sinett\\MLAB\\BuilderBundle\\Entity\\Group' . "\0" . 'categories', 'roles'];
    }

    /**
     * 
     */
    public function __wakeup()
    {
        if ( ! $this->__isInitialized__) {
            $this->__initializer__ = function (Group $proxy) {
                $proxy->__setInitializer(null);
                $proxy->__setCloner(null);

                $existingProperties = get_object_vars($proxy);

                foreach ($proxy->__getLazyProperties() as $property => $defaultValue) {
                    if ( ! array_key_exists($property, $existingProperties)) {
                        $proxy->$property = $defaultValue;
                    }
                }
            };

        }
    }

    /**
     * 
     */
    public function __clone()
    {
        $this->__cloner__ && $this->__cloner__->__invoke($this, '__clone', []);
    }

    /**
     * Forces initialization of the proxy
     */
    public function __load()
    {
        $this->__initializer__ && $this->__initializer__->__invoke($this, '__load', []);
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     */
    public function __isInitialized()
    {
        return $this->__isInitialized__;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     */
    public function __setInitialized($initialized)
    {
        $this->__isInitialized__ = $initialized;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     */
    public function __setInitializer(\Closure $initializer = null)
    {
        $this->__initializer__ = $initializer;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     */
    public function __getInitializer()
    {
        return $this->__initializer__;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     */
    public function __setCloner(\Closure $cloner = null)
    {
        $this->__cloner__ = $cloner;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific cloning logic
     */
    public function __getCloner()
    {
        return $this->__cloner__;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     * @static
     */
    public function __getLazyProperties()
    {
        return self::$lazyPropertiesDefaults;
    }

    
    /**
     * {@inheritDoc}
     */
    public function getId()
    {
        if ($this->__isInitialized__ === false) {
            return (int)  parent::getId();
        }


        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getId', []);

        return parent::getId();
    }

    /**
     * {@inheritDoc}
     */
    public function setName($name)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setName', [$name]);

        return parent::setName($name);
    }

    /**
     * {@inheritDoc}
     */
    public function getName()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getName', []);

        return parent::getName();
    }

    /**
     * {@inheritDoc}
     */
    public function setDescription($description)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setDescription', [$description]);

        return parent::setDescription($description);
    }

    /**
     * {@inheritDoc}
     */
    public function getDescription()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getDescription', []);

        return parent::getDescription();
    }

    /**
     * {@inheritDoc}
     */
    public function setIsDefault($isDefault)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setIsDefault', [$isDefault]);

        return parent::setIsDefault($isDefault);
    }

    /**
     * {@inheritDoc}
     */
    public function getIsDefault()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getIsDefault', []);

        return parent::getIsDefault();
    }

    /**
     * {@inheritDoc}
     */
    public function addUser(\Sinett\MLAB\BuilderBundle\Entity\User $users)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'addUser', [$users]);

        return parent::addUser($users);
    }

    /**
     * {@inheritDoc}
     */
    public function removeUser(\Sinett\MLAB\BuilderBundle\Entity\User $users)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'removeUser', [$users]);

        return parent::removeUser($users);
    }

    /**
     * {@inheritDoc}
     */
    public function getUsers()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getUsers', []);

        return parent::getUsers();
    }

    /**
     * {@inheritDoc}
     */
    public function addMenu(\Sinett\MLAB\BuilderBundle\Entity\Menu $menus)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'addMenu', [$menus]);

        return parent::addMenu($menus);
    }

    /**
     * {@inheritDoc}
     */
    public function removeMenu(\Sinett\MLAB\BuilderBundle\Entity\Menu $menus)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'removeMenu', [$menus]);

        return parent::removeMenu($menus);
    }

    /**
     * {@inheritDoc}
     */
    public function getMenus()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getMenus', []);

        return parent::getMenus();
    }

    /**
     * {@inheritDoc}
     */
    public function addApp(\Sinett\MLAB\BuilderBundle\Entity\App $apps)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'addApp', [$apps]);

        return parent::addApp($apps);
    }

    /**
     * {@inheritDoc}
     */
    public function removeApp(\Sinett\MLAB\BuilderBundle\Entity\App $apps)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'removeApp', [$apps]);

        return parent::removeApp($apps);
    }

    /**
     * {@inheritDoc}
     */
    public function getApps()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getApps', []);

        return parent::getApps();
    }

    /**
     * {@inheritDoc}
     */
    public function addTemplate(\Sinett\MLAB\BuilderBundle\Entity\Template $templates)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'addTemplate', [$templates]);

        return parent::addTemplate($templates);
    }

    /**
     * {@inheritDoc}
     */
    public function removeTemplate(\Sinett\MLAB\BuilderBundle\Entity\Template $templates)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'removeTemplate', [$templates]);

        return parent::removeTemplate($templates);
    }

    /**
     * {@inheritDoc}
     */
    public function getTemplates()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getTemplates', []);

        return parent::getTemplates();
    }

    /**
     * {@inheritDoc}
     */
    public function addComponentGroup(\Sinett\MLAB\BuilderBundle\Entity\ComponentGroup $componentGroup)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'addComponentGroup', [$componentGroup]);

        return parent::addComponentGroup($componentGroup);
    }

    /**
     * {@inheritDoc}
     */
    public function removeComponentGroup(\Sinett\MLAB\BuilderBundle\Entity\ComponentGroup $componentGroup)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'removeComponentGroup', [$componentGroup]);

        return parent::removeComponentGroup($componentGroup);
    }

    /**
     * {@inheritDoc}
     */
    public function getComponentGroups()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getComponentGroups', []);

        return parent::getComponentGroups();
    }

    /**
     * {@inheritDoc}
     */
    public function getComponents()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getComponents', []);

        return parent::getComponents();
    }

    /**
     * {@inheritDoc}
     */
    public function __toString()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, '__toString', []);

        return parent::__toString();
    }

    /**
     * {@inheritDoc}
     */
    public function setEnabled($enabled)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setEnabled', [$enabled]);

        return parent::setEnabled($enabled);
    }

    /**
     * {@inheritDoc}
     */
    public function getEnabled()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getEnabled', []);

        return parent::getEnabled();
    }

    /**
     * {@inheritDoc}
     */
    public function setCategories($categories)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setCategories', [$categories]);

        return parent::setCategories($categories);
    }

    /**
     * {@inheritDoc}
     */
    public function getCategories()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getCategories', []);

        return parent::getCategories();
    }

    /**
     * {@inheritDoc}
     */
    public function addRole($role)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'addRole', [$role]);

        return parent::addRole($role);
    }

    /**
     * {@inheritDoc}
     */
    public function hasRole($role)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'hasRole', [$role]);

        return parent::hasRole($role);
    }

    /**
     * {@inheritDoc}
     */
    public function getRoles()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getRoles', []);

        return parent::getRoles();
    }

    /**
     * {@inheritDoc}
     */
    public function removeRole($role)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'removeRole', [$role]);

        return parent::removeRole($role);
    }

    /**
     * {@inheritDoc}
     */
    public function setRoles(array $roles)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setRoles', [$roles]);

        return parent::setRoles($roles);
    }

}
